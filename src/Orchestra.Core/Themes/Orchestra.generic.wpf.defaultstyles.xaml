<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:catel="http://schemas.catelproject.com"
                    xmlns:orccontrols="http://schemas.wildgums.com/orc/controls">

    <!-- Converters -->
    <catel:BooleanToGrayscaleConverter x:Key="BooleanToGrayscaleConverter" />
    <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
    <catel:GetFirstValidationErrorConverter x:Key="GetFirstValidationErrorConverter" />

    <!-- Buttons -->
    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Grayscale effect when disabled -->
        <!--<Setter Property="Effect">
            <Setter.Value>
                <effects:GrayscaleEffect DesaturationFactor="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled, Converter={StaticResource BooleanToGrayscaleConverter}}" />
            </Setter.Value>
        </Setter>-->
    </Style>

    <!-- CheckBox -->
    <Style x:Key="DefaultCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.CheckBox}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Left" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ComboBox -->
    <Style x:Key="DefaultComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="120" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DocumentViewer -->
    <Style x:Key="DefaultDocumentViewerStyle" TargetType="{x:Type DocumentViewer}" BasedOn="{StaticResource {x:Type DocumentViewer}}">
        <!--<Setter Property="Background" Value="AliceBlue" />-->
    </Style>    

    <!-- GroupBox -->
    <Style x:Key="DefaultGroupBoxStyle" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="BorderBrush" Value="#888" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="{DynamicResource Margin.GroupBox}" />
    </Style>

    <!-- Label -->
    <Style x:Key="DefaultLabelStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Label}" />
        <Setter Property="Padding" Value="{DynamicResource Padding.Label}" />
    </Style>

    <!-- ListBox -->
    <Style x:Key="DefaultListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- ListView -->
    <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- Menu item -->
    <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
    </Style>

    <!-- PasswordBox -->
    <Style x:Key="DefaultPasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Progress bar -->
    <Style x:Key="DefaultProgressBarStyle" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    </Style>

    <!-- RadioButton -->
    <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.RadioButton}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- RepeatButton -->
    <Style x:Key="DefaultRepeatButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="UseLayoutRounding" Value="True" />
    </Style>

    <!-- RichTextBox -->
    <Style x:Key="DefaultRichTextBoxStyle" TargetType="{x:Type RichTextBox}">
        <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!-- Slider -->
    <Style x:Key="DefaultSliderStyle" TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}">
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="{DynamicResource Margin.Slider}" />
    </Style>

    <!-- TabControl -->
    <Style x:Key="DefaultTabControlStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    </Style>    
    
    <!-- TextBlock -->
    <Style x:Key="DefaultTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.TextBlock}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- TextBox -->
    <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="MinHeight" Value="{DynamicResource Size.MinHeight}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
        <Setter Property="Padding" Value="{DynamicResource Padding.TextBox}" />
        <Setter Property="Margin" Value="{DynamicResource Margin.TextBox}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />

        <!-- Due to a bug, adjust the error template (see http://stackoverflow.com/questions/321327/how-do-i-get-rid-of-the-red-rectangle-when-my-wpf-binding-validation-has-failed-a) -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter" />
                    </ControlTemplate.Resources>
                    <DockPanel LastChildFill="True">
                        <Border BorderThickness="1" BorderBrush="Red" 
								Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}">
                            <AdornedElementPlaceholder x:Name="placeholder" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Show errors as tooltip -->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource GetFirstValidationErrorConverter}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TreeView -->
    <Style x:Key="DefaultTreeViewStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Default}" />
    </Style>
    
    <!-- ToggleButton -->
    <Style x:Key="DefaultToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Margin" Value="{DynamicResource Margin.Button}" />
        <Setter Property="Height" Value="{DynamicResource Size.Height}" />
    </Style>

</ResourceDictionary>